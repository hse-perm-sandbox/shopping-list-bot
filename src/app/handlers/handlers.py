from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

import os
from dotenv import load_dotenv

import jwt
import datetime
import app.keyboards as kb
import app.states
from app import db
router = Router()
shopping_list = {}
shared_access = {}  #type: dict[int, list[int]]

load_dotenv()
SECRET_KEY = os.getenv("SECRET_KEY")

@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    await db.add_user(user_id, username)  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–∏—Å–∫–æ–≤ –∏–∑ –ë–î
    shopping_list[user_id] = await db.load_user_data(user_id)

    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=kb.main)

@router.callback_query(F.data == 'create')
async def create(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞')
    await state.set_state(app.states.shoppingListStates.list_name)

@router.message(app.states.shoppingListStates.list_name)
async def set_list_name(message: Message, state: FSMContext):
    list_name = message.text
    user_id = message.from_user.id
    if list_name not in shopping_list[user_id]['lists']:
        shopping_list[user_id]['lists'][list_name] = {'categories': {}}
        await db.add_list(user_id, list_name)
        await message.answer(f"–°–ø–∏—Å–æ–∫ '{list_name}' —Å–æ–∑–¥–∞–Ω!")
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb.main)
    else:
        await message.answer(f"–°–ø–∏—Å–æ–∫ '{list_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb.main)
    await state.clear()

@router.callback_query(F.data == 'category_add')
async def category_add(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await state.set_state(app.states.shoppingListStates.category_name)

@router.message(app.states.shoppingListStates.category_name)
async def set_list_name(message: Message, state: FSMContext):
    category_name = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    list_name = data['selected_list']
    if category_name not in shopping_list[user_id]['lists'][list_name]['categories']:
        shopping_list[user_id]['lists'][list_name]['categories'][category_name] = []
        list_id = await db.get_list_id(user_id, list_name)
        await db.add_category(list_id, category_name)
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ '{list_name}'")
        await message.answer(f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ {list_name}!', reply_markup=kb.category)
    else:
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb.main)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏
@router.callback_query(F.data == 'manage')
async def manage(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=kb.manage)

@router.callback_query(F.data == 'list_check')
async def check_list(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    own_data = shopping_list.get(user_id, {'lists': {}})
    own_lists = own_data['lists']
    # –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    shared_lists = {}
    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for other_user_id, data in shopping_list.items():
        if other_user_id == user_id:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
        for list_name in data['lists']:
            list_id = await db.get_list_id(other_user_id, list_name)
            #4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É
            if user_id in shared_access and list_id in shared_access[user_id]:
                shared_lists[f"{list_name} (–æ—Ç @{other_user_id})"] = data['lists'][list_name]
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã–µ
    combined_lists = {**own_lists, **shared_lists}
    if not combined_lists:
        await callback.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤.')
        return
    #–ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = kb.view_kb({'lists': combined_lists})
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –°–ø–∏—Å–æ–∫', reply_markup=await keyboard)

@router.callback_query(F.data == 'delete')
async def open_delete_menu(callback: CallbackQuery):
    await callback.message.edit_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb.delete)

@router.callback_query(F.data == "delete_list")
async def delete_list(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    list_name = data.get("selected_list")
    user_id = callback.from_user.id
    if list_name in shopping_list[user_id]["lists"]:
        del shopping_list[user_id]["lists"][list_name]
        await db.delete_list(user_id, list_name)
        await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ '{list_name}' —É–¥–∞–ª–µ–Ω.")
    else:
        await callback.answer("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()
    await callback.message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=kb.main)

@router.callback_query(F.data == 'delete_category')
async def category_to_delete(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    list_name = data.get("selected_list")
    user_data = shopping_list[user_id]['lists'][list_name]
    keyboard = kb.view_category_delete(user_data)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=await keyboard)

@router.callback_query(F.data.startswith('select_category_delete'))
async def delete_category(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    list_name = data.get('selected_list')
    category_name = data.get('selected_category')
    if category_name in shopping_list[user_id]['lists'][list_name]['categories']:
        del shopping_list[user_id]['lists'][list_name]['categories'][category_name]
        list_id = await db.get_list_id(user_id, list_name)
        await db.delete_category(list_id, category_name)
        await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await select_list(callback, state)

@router.callback_query(F.data == 'back')
async def manage(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=kb.main)

@router.callback_query(F.data == 'back_to_categories')
async def backToCategories(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb.view_category())

@router.callback_query(F.data.startswith("select_list:"))
async def select_list(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    list_name = callback.data.split(':')[1]
    await state.update_data(selected_list=list_name)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {list_name} !", reply_markup=kb.category)

@router.callback_query(F.data == 'back_list_check')
async def back_list_check(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_data = shopping_list.get(user_id, {'lists': {}})
    keyboard = kb.view_kb(user_data)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –°–ø–∏—Å–æ–∫', reply_markup=await keyboard)
    await state.clear()

@router.callback_query(F.data == 'view_list')
async def view_list(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    list_name = data['selected_list']
    user_id = callback.from_user.id
    full_list = shopping_list[user_id]["lists"][list_name]["categories"]
    if not full_list:
        await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    response = f" –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ '{list_name}':\n\n"
    for category, items in full_list.items():
        response += f" {category}:\n"
        if not items:
            response += "- (–ø—É—Å—Ç–æ)\n"
        else:
            for item in items:
                response += f"- {item}\n"
        response += "\n"
    await callback.message.edit_text(response, reply_markup=kb.backToLists)

@router.callback_query(F.data == 'product_add')
async def choose_category(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    list_name = data.get("selected_list")
    user_data = shopping_list[user_id]['lists'][list_name]
    if not user_data['categories']:
        await callback.answer('–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
        return
    keyboard = kb.view_category(user_data)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=await keyboard)

@router.callback_query(F.data.startswith("select_category:"))
async def select_list(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    list_name = data.get("selected_list")
    category_name = callback.data.split(':')[1]
    await state.update_data(selected_category=category_name)
    await state.update_data(selected_list=list_name)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.backFromProduct
    )
    await state.set_state(app.states.shoppingListStates.item_name)

@router.message(app.states.shoppingListStates.item_name)
async def item_add(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    list_name = data['selected_list']
    category_name = data['selected_category']
    item_name = message.text
    shopping_list[user_id]['lists'][list_name]['categories'][category_name].append(item_name)
    list_id = await db.get_list_id(user_id, list_name)
    category_id = await db.get_category_id(list_id, category_name)
    await db.add_item(category_id, item_name)
    keyboard = kb.view_category(shopping_list[user_id]['lists'][list_name])
    await message.answer(f"–¢–æ–≤–∞—Ä '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'.")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=await keyboard)

@router.callback_query(F.data == 'back_from_product')
async def back_from_product(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    list_name = data.get("selected_list")
    user_data = shopping_list[user_id]['lists'][list_name]
    keyboard = kb.view_category(user_data)
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await keyboard)

@router.callback_query(F.data == 'back_to_category')
async def back_to_category(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    list_name = data.get("selected_list")
    await state.update_data(selected_list=list_name)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: {list_name} !", reply_markup=kb.category)

@router.callback_query(F.data == "delete_item")
async def delete_item(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    list_name = data.get("selected_list")
    user_data = shopping_list[user_id]['lists'][list_name]
    category_name = data.get("selected_category")
    if not list_name:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫!")
        return
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –µ—ë
    if not category_name:
        categories = shopping_list[user_id]['lists'][list_name]['categories']
        if not categories:
            await callback.message.answer("–í —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        keyboard = kb.view_category_delete(user_data)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=await keyboard)
        return
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
    items = shopping_list[user_id]['lists'][list_name]['categories'][category_name]
    if not items:
        await callback.answer("üõí –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    keyboard = kb.view_items_delete(items)
    await callback.message.edit_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("delete_item:"))
async def confirm_delete_item(callback: CallbackQuery, state: FSMContext):
    item_name = callback.data.split(":", 1)[1]
    data = await state.get_data()
    list_name = data["selected_list"]
    category_name = data["selected_category"]
    user_id = callback.from_user.id
    try:
        items = shopping_list[user_id]["lists"][list_name]["categories"][category_name]
        if item_name in items:
            items.remove(item_name)
            list_id = await db.get_list_id(user_id, list_name)
            category_id = await db.get_category_id(list_id, category_name)
            await db.delete_item(category_id, item_name)
            await callback.message.edit_text(f"–¢–æ–≤–∞—Ä '{item_name}' —É–¥–∞–ª–µ–Ω.")
        else:
            await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    except KeyError:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
    user_data = shopping_list[user_id]['lists'][list_name]
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb.category)

@router.callback_query(F.data.startswith("select_cat_delete"))
async def category_chosen_for_deletion(callback: CallbackQuery, state: FSMContext):
    category_name = callback.data.split(":")[1]
    user_id = callback.from_user.id
    data = await state.get_data()
    list_name = data.get("selected_list")

    await state.update_data(selected_category=category_name)

    items = shopping_list[user_id]['lists'][list_name]['categories'][category_name]
    if not items:
        await callback.message.answer("üõí –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    keyboard = kb.view_items_delete(items)
    await callback.message.edit_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data == "share_list")
async def share_list_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_lists = shopping_list.get(user_id, {}).get("lists", {})

    if not user_lists:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        return

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    for list_name in user_lists:
        kb.button(text=list_name, callback_data=f"share_select:{list_name}")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="sync")

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:", reply_markup=kb.adjust(1).as_markup())
    await state.set_state(app.states.syncStates.select_list)

@router.callback_query(F.data == "enter_code")
async def enter_code(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –¥–∞–ª–∏:")
    await state.set_state(app.states.syncStates.jwt_code)

@router.message(app.states.syncStates.jwt_code)
async def receive_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    token = message.text
    try:
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        data = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        sender_id = data["user_id"]
        list_name = data["list_name"]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ç–∞–∫–æ–π —Å–ø–∏—Å–æ–∫
        sender_lists = shopping_list.get(sender_id, {}).get("lists", {})
        if list_name not in sender_lists:
            await message.answer("–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
            await state.clear()
            return
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏
        if sender_id not in shopping_list:
            shopping_list[sender_id] = await db.load_user_data(sender_id)
            sender_lists = shopping_list[sender_id]["lists"]
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –æ–±—ä–µ–∫—Ç
        shopping_list.setdefault(user_id, {"lists": {}})
        if list_name in shopping_list[user_id]["lists"]:
            await message.answer("–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")
        else:
            shopping_list[user_id]["lists"][list_name] = sender_lists[list_name]
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –≤ shared_access
            list_id = await db.get_list_id(sender_id, list_name)
            shared_access.setdefault(user_id, [])
            if list_id not in shared_access[user_id]:
                shared_access[user_id].append(list_id)

            await message.answer(f"–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É: '{list_name}'")

    except jwt.ExpiredSignatureError:
        await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫.")
    except jwt.InvalidTokenError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
    finally:
        await state.clear()

@router.callback_query(F.data == "received_lists")
async def view_received_lists(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_lists = shopping_list.get(user_id, {}).get("lists", {})
    received = [name for name in user_lists if "(–∫–æ–ø–∏—è)" in name]

    if not received:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.")
    else:
        text = "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏:\n\n" + "\n".join(f"‚Ä¢ {name}" for name in received)
        await callback.message.answer(text)

@router.callback_query(F.data == "sync")
async def sync_menu(callback: CallbackQuery):
    await callback.message.edit_text("üîÑ –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø", reply_markup=kb.sync_menu)

@router.callback_query(F.data.startswith("share_select:"))
async def generate_share_token(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    list_name = callback.data.split(":", 1)[1]

    if list_name not in shopping_list.get(user_id, {}).get("lists", {}):
        await callback.message.answer("–¢–∞–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ—Ç.")
        return

    payload = {
        "user_id": user_id,
        "list_name": list_name,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(days=1)
    }

    token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")
    await callback.message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n\n`{token}`", parse_mode="Markdown"
    )
    await state.clear()
